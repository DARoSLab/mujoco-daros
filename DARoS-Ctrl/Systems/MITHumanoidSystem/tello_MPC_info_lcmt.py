"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class tello_MPC_info_lcmt(object):
    __slots__ = ["horizon", "x", "y", "z", "dx", "dy", "dz", "roll", "pitch", "yaw", "wx", "wy", "wz", "RToeZ", "RHeelZ", "LToeZ", "LHeelZ"]

    __typenames__ = ["int64_t", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, [20], [20], [20], [20], [20], [20], [20], [20], [20], [20], [20], [20], [20], [20], [20], [20]]

    def __init__(self):
        self.horizon = 0
        self.x = [ 0.0 for dim0 in range(20) ]
        self.y = [ 0.0 for dim0 in range(20) ]
        self.z = [ 0.0 for dim0 in range(20) ]
        self.dx = [ 0.0 for dim0 in range(20) ]
        self.dy = [ 0.0 for dim0 in range(20) ]
        self.dz = [ 0.0 for dim0 in range(20) ]
        self.roll = [ 0.0 for dim0 in range(20) ]
        self.pitch = [ 0.0 for dim0 in range(20) ]
        self.yaw = [ 0.0 for dim0 in range(20) ]
        self.wx = [ 0.0 for dim0 in range(20) ]
        self.wy = [ 0.0 for dim0 in range(20) ]
        self.wz = [ 0.0 for dim0 in range(20) ]
        self.RToeZ = [ 0.0 for dim0 in range(20) ]
        self.RHeelZ = [ 0.0 for dim0 in range(20) ]
        self.LToeZ = [ 0.0 for dim0 in range(20) ]
        self.LHeelZ = [ 0.0 for dim0 in range(20) ]

    def encode(self):
        buf = BytesIO()
        buf.write(tello_MPC_info_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.horizon))
        buf.write(struct.pack('>20d', *self.x[:20]))
        buf.write(struct.pack('>20d', *self.y[:20]))
        buf.write(struct.pack('>20d', *self.z[:20]))
        buf.write(struct.pack('>20d', *self.dx[:20]))
        buf.write(struct.pack('>20d', *self.dy[:20]))
        buf.write(struct.pack('>20d', *self.dz[:20]))
        buf.write(struct.pack('>20d', *self.roll[:20]))
        buf.write(struct.pack('>20d', *self.pitch[:20]))
        buf.write(struct.pack('>20d', *self.yaw[:20]))
        buf.write(struct.pack('>20d', *self.wx[:20]))
        buf.write(struct.pack('>20d', *self.wy[:20]))
        buf.write(struct.pack('>20d', *self.wz[:20]))
        buf.write(struct.pack('>20d', *self.RToeZ[:20]))
        buf.write(struct.pack('>20d', *self.RHeelZ[:20]))
        buf.write(struct.pack('>20d', *self.LToeZ[:20]))
        buf.write(struct.pack('>20d', *self.LHeelZ[:20]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != tello_MPC_info_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return tello_MPC_info_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = tello_MPC_info_lcmt()
        self.horizon = struct.unpack(">q", buf.read(8))[0]
        self.x = struct.unpack('>20d', buf.read(160))
        self.y = struct.unpack('>20d', buf.read(160))
        self.z = struct.unpack('>20d', buf.read(160))
        self.dx = struct.unpack('>20d', buf.read(160))
        self.dy = struct.unpack('>20d', buf.read(160))
        self.dz = struct.unpack('>20d', buf.read(160))
        self.roll = struct.unpack('>20d', buf.read(160))
        self.pitch = struct.unpack('>20d', buf.read(160))
        self.yaw = struct.unpack('>20d', buf.read(160))
        self.wx = struct.unpack('>20d', buf.read(160))
        self.wy = struct.unpack('>20d', buf.read(160))
        self.wz = struct.unpack('>20d', buf.read(160))
        self.RToeZ = struct.unpack('>20d', buf.read(160))
        self.RHeelZ = struct.unpack('>20d', buf.read(160))
        self.LToeZ = struct.unpack('>20d', buf.read(160))
        self.LHeelZ = struct.unpack('>20d', buf.read(160))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if tello_MPC_info_lcmt in parents: return 0
        tmphash = (0xc6763f0e05db24eb) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if tello_MPC_info_lcmt._packed_fingerprint is None:
            tello_MPC_info_lcmt._packed_fingerprint = struct.pack(">Q", tello_MPC_info_lcmt._get_hash_recursive([]))
        return tello_MPC_info_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

