//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: RPCBounds.cpp
//
// MATLAB Coder version            : 3.2
// C/C++ source code generated on  : 05-Mar-2020 07:55:47
//

// Include Files
#include "RPCBounds.h"
#include "RPCConstraintJacobian.h"
#include "RPCConstraintJacobianFinal.h"
#include "RPCConstraintJacobianFinalSP.h"
#include "RPCConstraintJacobianSP.h"
#include "RPCConstraints.h"
#include "RPCConstraintsFinal.h"
#include "RPCCost.h"
#include "RPCCostGradient.h"
#include "RPCHeuristics.h"
#include "RPCInitialize.h"
#include "RPCLagrangianHessian.h"
#include "RPCLagrangianHessianFinal.h"
#include "RPCLagrangianHessianFinalSP.h"
#include "RPCLagrangianHessianSP.h"

// Function Definitions

//
// RPCBOUNDS
//     [X_LB,X_UB,CONSTRAINTS_UB,CONSTRAINTS_LB] = RPCBOUNDS(IN1,IN2,IN3,IN4,IN5,IN6,IN7,IN8)
// Arguments    : const double in1[12]
//                const double in2[12]
//                const double in3[4]
//                const double in4[12]
//                const double in5[12]
//                const double in6[12]
//                const double in7[24]
//                const double in8[24]
//                double X_lb[36]
//                double X_ub[36]
//                double constraints_ub[44]
//                double constraints_lb[44]
// Return Type  : void
//
void RPCBounds(const double in1[12], const double in2[12], const double in3[4],
               const double in4[12], const double in5[12], const double in6[12],
               const double in7[24], const double in8[24], double X_lb[36],
               double X_ub[36], double constraints_ub[44], double
               constraints_lb[44])
{
  double t2;
  double t3;
  double t4;
  double t5;
  double t6;
  double t7;
  double t8;
  double t9;
  double t10;
  double t11;
  double t12;
  double t13;
  double t15;
  int i;
  static const double dv0[44] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -2.0E+19, -2.0E+19, -2.0E+19, -2.0E+19, -2.0E+19,
    -2.0E+19, -2.0E+19, -2.0E+19, -2.0E+19, -2.0E+19, -2.0E+19, -2.0E+19,
    -2.0E+19, -2.0E+19, -2.0E+19, -2.0E+19 };

  //     This function was generated by the Symbolic Math Toolbox version 7.1.
  //     05-Mar-2020 07:53:51
  t2 = std::cos(in1[5]);
  t3 = std::sin(in1[5]);
  t4 = in4[0] * t2;
  t5 = in4[1] * t2;
  t6 = in4[0] * t3;
  t7 = in4[3] * t2;
  t8 = in4[4] * t2;
  t9 = in4[3] * t3;
  t10 = in4[6] * t2;
  t11 = in4[7] * t2;
  t12 = in4[6] * t3;
  t13 = in4[9] * t2;
  t2 *= in4[10];
  t15 = in4[9] * t3;
  X_lb[0] = in2[0] + in6[0];
  X_lb[1] = in2[1] + in6[1];
  memcpy(&X_lb[2], &in6[2], 10U * sizeof(double));
  X_lb[12] = in3[0] * ((t4 + in8[0]) - in4[1] * t3);
  X_lb[13] = in3[0] * ((t5 + t6) + in8[1]);
  X_lb[14] = in3[0] * (in4[2] + in8[2]);
  X_lb[15] = in3[0] * in8[3];
  X_lb[16] = in3[0] * in8[4];
  X_lb[17] = in3[0] * in8[5];
  X_lb[18] = in3[1] * ((t7 + in8[6]) - in4[4] * t3);
  X_lb[19] = in3[1] * ((t8 + t9) + in8[7]);
  X_lb[20] = in3[1] * (in4[5] + in8[8]);
  X_lb[21] = in3[1] * in8[9];
  X_lb[22] = in3[1] * in8[10];
  X_lb[23] = in3[1] * in8[11];
  X_lb[24] = in3[2] * ((t10 + in8[12]) - in4[7] * t3);
  X_lb[25] = in3[2] * ((t11 + t12) + in8[13]);
  X_lb[26] = in3[2] * (in4[8] + in8[14]);
  X_lb[27] = in3[2] * in8[15];
  X_lb[28] = in3[2] * in8[16];
  X_lb[29] = in3[2] * in8[17];
  X_lb[30] = in3[3] * ((t13 + in8[18]) - in4[10] * t3);
  X_lb[31] = in3[3] * ((t2 + t15) + in8[19]);
  X_lb[32] = in3[3] * (in4[11] + in8[20]);
  X_lb[33] = in3[3] * in8[21];
  X_lb[34] = in3[3] * in8[22];
  X_lb[35] = in3[3] * in8[23];
  X_ub[0] = in2[0] + in5[0];
  X_ub[1] = in2[1] + in5[1];
  memcpy(&X_ub[2], &in5[2], 10U * sizeof(double));
  X_ub[12] = in3[0] * ((t4 + in7[0]) - in4[1] * t3);
  X_ub[13] = in3[0] * ((t5 + t6) + in7[1]);
  X_ub[14] = in3[0] * (in4[2] + in7[2]);
  X_ub[15] = in3[0] * in7[3];
  X_ub[16] = in3[0] * in7[4];
  X_ub[17] = in3[0] * in7[5];
  X_ub[18] = in3[1] * ((t7 + in7[6]) - in4[4] * t3);
  X_ub[19] = in3[1] * ((t8 + t9) + in7[7]);
  X_ub[20] = in3[1] * (in4[5] + in7[8]);
  X_ub[21] = in3[1] * in7[9];
  X_ub[22] = in3[1] * in7[10];
  X_ub[23] = in3[1] * in7[11];
  X_ub[24] = in3[2] * ((t10 + in7[12]) - in4[7] * t3);
  X_ub[25] = in3[2] * ((t11 + t12) + in7[13]);
  X_ub[26] = in3[2] * (in4[8] + in7[14]);
  X_ub[27] = in3[2] * in7[15];
  X_ub[28] = in3[2] * in7[16];
  X_ub[29] = in3[2] * in7[17];
  X_ub[30] = in3[3] * ((t13 + in7[18]) - in4[10] * t3);
  X_ub[31] = in3[3] * ((t2 + t15) + in7[19]);
  X_ub[32] = in3[3] * (in4[11] + in7[20]);
  X_ub[33] = in3[3] * in7[21];
  X_ub[34] = in3[3] * in7[22];
  X_ub[35] = in3[3] * in7[23];
  for (i = 0; i < 44; i++) {
    constraints_lb[i] = dv0[i];
    constraints_ub[i] = 0.0;
  }
}

//
// File trailer for RPCBounds.cpp
//
// [EOF]
//
