//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: RPCLagrangianHessianSP.cpp
//
// MATLAB Coder version            : 3.2
// C/C++ source code generated on  : 05-Mar-2020 07:55:47
//

// Include Files
#include "RPCBounds.h"
#include "RPCConstraintJacobian.h"
#include "RPCConstraintJacobianFinal.h"
#include "RPCConstraintJacobianFinalSP.h"
#include "RPCConstraintJacobianSP.h"
#include "RPCConstraints.h"
#include "RPCConstraintsFinal.h"
#include "RPCCost.h"
#include "RPCCostGradient.h"
#include "RPCHeuristics.h"
#include "RPCInitialize.h"
#include "RPCLagrangianHessian.h"
#include "RPCLagrangianHessianFinal.h"
#include "RPCLagrangianHessianFinalSP.h"
#include "RPCLagrangianHessianSP.h"

// Function Definitions

//
// RPCLAGRANGIANHESSIANSP
//     [ROW_INDEX_H,COL_INDEX_H] = RPCLAGRANGIANHESSIANSP(ITER,NUM_X)
// Arguments    : int iter
//                int NUM_X
//                int row_index_H[135]
//                int col_index_H[135]
// Return Type  : void
//
void RPCLagrangianHessianSP(int iter, int NUM_X, int row_index_H[135],
  int col_index_H[135])
{
  int t2;

  //     This function was generated by the Symbolic Math Toolbox version 7.1.
  //     05-Mar-2020 07:54:49
  t2 = NUM_X * iter;
  row_index_H[0] = t2;
  row_index_H[1] = t2 + 1;
  row_index_H[2] = t2 + 2;
  row_index_H[3] = t2 + 3;
  row_index_H[4] = t2 + 4;
  row_index_H[5] = t2 + 5;
  row_index_H[6] = t2 + 12;
  row_index_H[7] = t2 + 13;
  row_index_H[8] = t2 + 14;
  row_index_H[9] = t2 + 15;
  row_index_H[10] = t2 + 16;
  row_index_H[11] = t2 + 17;
  row_index_H[12] = t2 + 18;
  row_index_H[13] = t2 + 19;
  row_index_H[14] = t2 + 20;
  row_index_H[15] = t2 + 21;
  row_index_H[16] = t2 + 22;
  row_index_H[17] = t2 + 23;
  row_index_H[18] = t2 + 24;
  row_index_H[19] = t2 + 25;
  row_index_H[20] = t2 + 26;
  row_index_H[21] = t2 + 27;
  row_index_H[22] = t2 + 28;
  row_index_H[23] = t2 + 29;
  row_index_H[24] = t2 + 30;
  row_index_H[25] = t2 + 31;
  row_index_H[26] = t2 + 32;
  row_index_H[27] = t2 + 33;
  row_index_H[28] = t2 + 34;
  row_index_H[29] = t2 + 35;
  row_index_H[30] = t2 + 4;
  row_index_H[31] = t2 + 5;
  row_index_H[32] = t2 + 12;
  row_index_H[33] = t2 + 13;
  row_index_H[34] = t2 + 14;
  row_index_H[35] = t2 + 15;
  row_index_H[36] = t2 + 16;
  row_index_H[37] = t2 + 17;
  row_index_H[38] = t2 + 18;
  row_index_H[39] = t2 + 19;
  row_index_H[40] = t2 + 20;
  row_index_H[41] = t2 + 21;
  row_index_H[42] = t2 + 22;
  row_index_H[43] = t2 + 23;
  row_index_H[44] = t2 + 24;
  row_index_H[45] = t2 + 25;
  row_index_H[46] = t2 + 26;
  row_index_H[47] = t2 + 27;
  row_index_H[48] = t2 + 28;
  row_index_H[49] = t2 + 29;
  row_index_H[50] = t2 + 30;
  row_index_H[51] = t2 + 31;
  row_index_H[52] = t2 + 32;
  row_index_H[53] = t2 + 33;
  row_index_H[54] = t2 + 34;
  row_index_H[55] = t2 + 35;
  row_index_H[56] = t2 + 5;
  row_index_H[57] = t2 + 12;
  row_index_H[58] = t2 + 13;
  row_index_H[59] = t2 + 14;
  row_index_H[60] = t2 + 15;
  row_index_H[61] = t2 + 16;
  row_index_H[62] = t2 + 17;
  row_index_H[63] = t2 + 18;
  row_index_H[64] = t2 + 19;
  row_index_H[65] = t2 + 20;
  row_index_H[66] = t2 + 21;
  row_index_H[67] = t2 + 22;
  row_index_H[68] = t2 + 23;
  row_index_H[69] = t2 + 24;
  row_index_H[70] = t2 + 25;
  row_index_H[71] = t2 + 26;
  row_index_H[72] = t2 + 27;
  row_index_H[73] = t2 + 28;
  row_index_H[74] = t2 + 29;
  row_index_H[75] = t2 + 30;
  row_index_H[76] = t2 + 31;
  row_index_H[77] = t2 + 32;
  row_index_H[78] = t2 + 33;
  row_index_H[79] = t2 + 34;
  row_index_H[80] = t2 + 35;
  row_index_H[81] = t2 + 6;
  row_index_H[82] = t2 + 7;
  row_index_H[83] = t2 + 8;
  row_index_H[84] = t2 + 9;
  row_index_H[85] = t2 + 10;
  row_index_H[86] = t2 + 11;
  row_index_H[87] = t2 + 12;
  row_index_H[88] = t2 + 16;
  row_index_H[89] = t2 + 17;
  row_index_H[90] = t2 + 13;
  row_index_H[91] = t2 + 15;
  row_index_H[92] = t2 + 17;
  row_index_H[93] = t2 + 14;
  row_index_H[94] = t2 + 15;
  row_index_H[95] = t2 + 16;
  row_index_H[96] = t2 + 15;
  row_index_H[97] = t2 + 16;
  row_index_H[98] = t2 + 17;
  row_index_H[99] = t2 + 18;
  row_index_H[100] = t2 + 22;
  row_index_H[101] = t2 + 23;
  row_index_H[102] = t2 + 19;
  row_index_H[103] = t2 + 21;
  row_index_H[104] = t2 + 23;
  row_index_H[105] = t2 + 20;
  row_index_H[106] = t2 + 21;
  row_index_H[107] = t2 + 22;
  row_index_H[108] = t2 + 21;
  row_index_H[109] = t2 + 22;
  row_index_H[110] = t2 + 23;
  row_index_H[111] = t2 + 24;
  row_index_H[112] = t2 + 28;
  row_index_H[113] = t2 + 29;
  row_index_H[114] = t2 + 25;
  row_index_H[115] = t2 + 27;
  row_index_H[116] = t2 + 29;
  row_index_H[117] = t2 + 26;
  row_index_H[118] = t2 + 27;
  row_index_H[119] = t2 + 28;
  row_index_H[120] = t2 + 27;
  row_index_H[121] = t2 + 28;
  row_index_H[122] = t2 + 29;
  row_index_H[123] = t2 + 30;
  row_index_H[124] = t2 + 34;
  row_index_H[125] = t2 + 35;
  row_index_H[126] = t2 + 31;
  row_index_H[127] = t2 + 33;
  row_index_H[128] = t2 + 35;
  row_index_H[129] = t2 + 32;
  row_index_H[130] = t2 + 33;
  row_index_H[131] = t2 + 34;
  row_index_H[132] = t2 + 33;
  row_index_H[133] = t2 + 34;
  row_index_H[134] = t2 + 35;
  col_index_H[0] = t2;
  col_index_H[1] = t2 + 1;
  col_index_H[2] = t2 + 2;
  col_index_H[3] = t2 + 3;
  col_index_H[4] = t2 + 3;
  col_index_H[5] = t2 + 3;
  col_index_H[6] = t2 + 3;
  col_index_H[7] = t2 + 3;
  col_index_H[8] = t2 + 3;
  col_index_H[9] = t2 + 3;
  col_index_H[10] = t2 + 3;
  col_index_H[11] = t2 + 3;
  col_index_H[12] = t2 + 3;
  col_index_H[13] = t2 + 3;
  col_index_H[14] = t2 + 3;
  col_index_H[15] = t2 + 3;
  col_index_H[16] = t2 + 3;
  col_index_H[17] = t2 + 3;
  col_index_H[18] = t2 + 3;
  col_index_H[19] = t2 + 3;
  col_index_H[20] = t2 + 3;
  col_index_H[21] = t2 + 3;
  col_index_H[22] = t2 + 3;
  col_index_H[23] = t2 + 3;
  col_index_H[24] = t2 + 3;
  col_index_H[25] = t2 + 3;
  col_index_H[26] = t2 + 3;
  col_index_H[27] = t2 + 3;
  col_index_H[28] = t2 + 3;
  col_index_H[29] = t2 + 3;
  col_index_H[30] = t2 + 4;
  col_index_H[31] = t2 + 4;
  col_index_H[32] = t2 + 4;
  col_index_H[33] = t2 + 4;
  col_index_H[34] = t2 + 4;
  col_index_H[35] = t2 + 4;
  col_index_H[36] = t2 + 4;
  col_index_H[37] = t2 + 4;
  col_index_H[38] = t2 + 4;
  col_index_H[39] = t2 + 4;
  col_index_H[40] = t2 + 4;
  col_index_H[41] = t2 + 4;
  col_index_H[42] = t2 + 4;
  col_index_H[43] = t2 + 4;
  col_index_H[44] = t2 + 4;
  col_index_H[45] = t2 + 4;
  col_index_H[46] = t2 + 4;
  col_index_H[47] = t2 + 4;
  col_index_H[48] = t2 + 4;
  col_index_H[49] = t2 + 4;
  col_index_H[50] = t2 + 4;
  col_index_H[51] = t2 + 4;
  col_index_H[52] = t2 + 4;
  col_index_H[53] = t2 + 4;
  col_index_H[54] = t2 + 4;
  col_index_H[55] = t2 + 4;
  col_index_H[56] = t2 + 5;
  col_index_H[57] = t2 + 5;
  col_index_H[58] = t2 + 5;
  col_index_H[59] = t2 + 5;
  col_index_H[60] = t2 + 5;
  col_index_H[61] = t2 + 5;
  col_index_H[62] = t2 + 5;
  col_index_H[63] = t2 + 5;
  col_index_H[64] = t2 + 5;
  col_index_H[65] = t2 + 5;
  col_index_H[66] = t2 + 5;
  col_index_H[67] = t2 + 5;
  col_index_H[68] = t2 + 5;
  col_index_H[69] = t2 + 5;
  col_index_H[70] = t2 + 5;
  col_index_H[71] = t2 + 5;
  col_index_H[72] = t2 + 5;
  col_index_H[73] = t2 + 5;
  col_index_H[74] = t2 + 5;
  col_index_H[75] = t2 + 5;
  col_index_H[76] = t2 + 5;
  col_index_H[77] = t2 + 5;
  col_index_H[78] = t2 + 5;
  col_index_H[79] = t2 + 5;
  col_index_H[80] = t2 + 5;
  col_index_H[81] = t2 + 6;
  col_index_H[82] = t2 + 7;
  col_index_H[83] = t2 + 8;
  col_index_H[84] = t2 + 9;
  col_index_H[85] = t2 + 10;
  col_index_H[86] = t2 + 11;
  col_index_H[87] = t2 + 12;
  col_index_H[88] = t2 + 12;
  col_index_H[89] = t2 + 12;
  col_index_H[90] = t2 + 13;
  col_index_H[91] = t2 + 13;
  col_index_H[92] = t2 + 13;
  col_index_H[93] = t2 + 14;
  col_index_H[94] = t2 + 14;
  col_index_H[95] = t2 + 14;
  col_index_H[96] = t2 + 15;
  col_index_H[97] = t2 + 16;
  col_index_H[98] = t2 + 17;
  col_index_H[99] = t2 + 18;
  col_index_H[100] = t2 + 18;
  col_index_H[101] = t2 + 18;
  col_index_H[102] = t2 + 19;
  col_index_H[103] = t2 + 19;
  col_index_H[104] = t2 + 19;
  col_index_H[105] = t2 + 20;
  col_index_H[106] = t2 + 20;
  col_index_H[107] = t2 + 20;
  col_index_H[108] = t2 + 21;
  col_index_H[109] = t2 + 22;
  col_index_H[110] = t2 + 23;
  col_index_H[111] = t2 + 24;
  col_index_H[112] = t2 + 24;
  col_index_H[113] = t2 + 24;
  col_index_H[114] = t2 + 25;
  col_index_H[115] = t2 + 25;
  col_index_H[116] = t2 + 25;
  col_index_H[117] = t2 + 26;
  col_index_H[118] = t2 + 26;
  col_index_H[119] = t2 + 26;
  col_index_H[120] = t2 + 27;
  col_index_H[121] = t2 + 28;
  col_index_H[122] = t2 + 29;
  col_index_H[123] = t2 + 30;
  col_index_H[124] = t2 + 30;
  col_index_H[125] = t2 + 30;
  col_index_H[126] = t2 + 31;
  col_index_H[127] = t2 + 31;
  col_index_H[128] = t2 + 31;
  col_index_H[129] = t2 + 32;
  col_index_H[130] = t2 + 32;
  col_index_H[131] = t2 + 32;
  col_index_H[132] = t2 + 33;
  col_index_H[133] = t2 + 34;
  col_index_H[134] = t2 + 35;
}

//
// File trailer for RPCLagrangianHessianSP.cpp
//
// [EOF]
//
