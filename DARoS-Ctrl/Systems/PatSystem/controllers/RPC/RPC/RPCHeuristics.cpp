//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: RPCHeuristics.cpp
//
// MATLAB Coder version            : 3.2
// C/C++ source code generated on  : 05-Mar-2020 07:55:47
//

// Include Files
#include "RPCBounds.h"
#include "RPCConstraintJacobian.h"
#include "RPCConstraintJacobianFinal.h"
#include "RPCConstraintJacobianFinalSP.h"
#include "RPCConstraintJacobianSP.h"
#include "RPCConstraints.h"
#include "RPCConstraintsFinal.h"
#include "RPCCost.h"
#include "RPCCostGradient.h"
#include "RPCHeuristics.h"
#include "RPCInitialize.h"
#include "RPCLagrangianHessian.h"
#include "RPCLagrangianHessianFinal.h"
#include "RPCLagrangianHessianFinalSP.h"
#include "RPCLagrangianHessianSP.h"

// Function Definitions

//
// RPCHEURISTICS
//     H_X = RPCHEURISTICS(IN1,IN2,IN3,IN4,IN5,STANCE_FRACTION,FLIGHT_PHASE,IN8,IN9,M,IN11,IN12)
// Arguments    : const double in1[12]
//                const double in2[12]
//                const double in3[4]
//                const double in4[4]
//                const double in5[12]
//                double stance_fraction
//                double flight_phase
//                const double in8[4]
//                const double in9[30]
//                double m
//                const double in11[3]
//                const double in12[4]
//                double H_X[36]
// Return Type  : void
//
void RPCHeuristics(const double in1[12], const double in2[12], const double in3
                   [4], const double in4[4], const double in5[12], double
                   stance_fraction, double flight_phase, const double in8[4],
                   const double in9[30], double m, const double in11[3], const
                   double in12[4], double H_X[36])
{
  double t2;
  double t3;
  double t4;
  double t5;
  double t6;
  double t10;
  double t13;
  double t14;
  double t15;
  double t16;
  double t18;
  double t19;
  double t20;
  double t21;
  double t22;
  double t26;
  double t32;
  double t34;
  double t35;
  double t38;
  double t40;
  double t41;
  double t42;

  //     This function was generated by the Symbolic Math Toolbox version 7.1.
  //     05-Mar-2020 07:53:58
  t2 = std::cos(in1[5]);
  t3 = std::sin(in1[5]);
  t4 = std::cos(in2[5]);
  t5 = t4 * in2[6];
  t6 = std::sin(in2[5]);
  t10 = (in11[0] * in11[0] + in11[1] * in11[1]) + in11[2] * in11[2];
  t13 = in5[1] * t2 + in5[0] * t3;
  t14 = t4 * in2[7];
  t15 = t6 * in2[6];
  t16 = t14 + t15;
  t18 = in5[0] * t2 - in5[1] * t3;
  t19 = std::sqrt(in1[2]);
  t20 = 1.0 / pow(t10, 0.25);
  t21 = t6 * in2[7];
  t22 = 1.0 / std::sqrt(t10);
  t26 = 1.0 / (flight_phase - (flight_phase - 1.0) * (((in3[0] + in3[1]) + in3[2])
    + in3[3]));
  t10 = std::sqrt(in2[6] * in2[6] + in2[7] * in2[7]);
  t32 = t5 - t21;
  t34 = in9[13] * t19 * t20 * ((-t5 + t21) + in1[6]);
  t35 = in9[14] * t16 * t22 * in1[2] * in2[11];
  t38 = in5[4] * t2 + in5[3] * t3;
  t40 = in5[3] * t2 - in5[4] * t3;
  t41 = (t14 + t15) - in1[7];
  t42 = -(in9[20] * in11[0] * m * stance_fraction * t26) - in9[21] * m * t6 *
    t10 * in2[11];
  t21 = in9[21] * m * t4 * t10 * in2[11] - in9[20] * in11[1] * m *
    stance_fraction * t26;
  t14 = in5[7] * t2 + in5[6] * t3;
  t15 = in5[6] * t2 - in5[7] * t3;
  t4 = in5[10] * t2 + in5[9] * t3;
  t10 = in5[9] * t2 - in5[10] * t3;
  H_X[0] = 0.0;
  H_X[1] = 0.0;
  H_X[2] = in9[6] + in9[5] * in2[6];
  H_X[3] = in9[1] + in9[0] * in2[7];
  H_X[4] = (in9[3] + in9[2] * in2[6]) - in9[4] * std::sin(in4[0] *
    3.1415926535897931 * 2.0);
  H_X[5] = 0.0;
  H_X[6] = 0.0;
  H_X[7] = 0.0;
  H_X[8] = 0.0;
  H_X[9] = 0.0;
  H_X[10] = 0.0;
  H_X[11] = 0.0;
  H_X[12] = (((t34 + t35) + in9[10] * t18) + in9[11] * in8[0] * (t5 - t6 * in2[7])
             * 0.5) - in9[12] * in8[0] * t13 * in2[11] * 0.5;
  H_X[13] = (((in9[10] * t13 + in9[11] * in8[0] * t16 * 0.5) - in9[13] * t19 *
              t20 * t41) + in9[12] * in8[0] * t18 * in2[11] * 0.5) - in9[14] *
    t22 * t32 * in1[2] * in2[11];
  H_X[14] = in12[0];
  H_X[15] = t42;
  H_X[16] = t21;
  H_X[17] = -in9[20] * in11[2] * m * stance_fraction * t26;
  H_X[18] = (((t34 + t35) + in9[10] * t40) + in9[11] * in8[1] * t32 * 0.5) -
    in9[12] * in8[1] * t38 * in2[11] * 0.5;
  H_X[19] = (((in9[10] * t38 + in9[11] * in8[1] * t16 * 0.5) - in9[13] * t19 *
              t20 * t41) + in9[12] * in8[1] * t40 * in2[11] * 0.5) - in9[14] *
    t22 * t32 * in1[2] * in2[11];
  H_X[20] = in12[1];
  H_X[21] = t42;
  H_X[22] = t21;
  H_X[23] = -in9[20] * in11[2] * m * stance_fraction * t26;
  H_X[24] = (((t34 + t35) + in9[10] * t15) + in9[11] * in8[2] * t32 * 0.5) -
    in9[12] * in8[2] * t14 * in2[11] * 0.5;
  H_X[25] = (((in9[10] * t14 + in9[11] * in8[2] * t16 * 0.5) - in9[13] * t19 *
              t20 * t41) + in9[12] * in8[2] * t15 * in2[11] * 0.5) - in9[14] *
    t22 * t32 * in1[2] * in2[11];
  H_X[26] = in12[2];
  H_X[27] = t42;
  H_X[28] = t21;
  H_X[29] = -in9[20] * in11[2] * m * stance_fraction * t26;
  H_X[30] = (((t34 + t35) + in9[10] * t10) + in9[11] * in8[3] * t32 * 0.5) -
    in9[12] * in8[3] * t4 * in2[11] * 0.5;
  H_X[31] = (((in9[10] * t4 + in9[11] * in8[3] * t16 * 0.5) - in9[13] * t19 *
              t20 * t41) + in9[12] * in8[3] * t10 * in2[11] * 0.5) - in9[14] *
    t22 * t32 * in1[2] * in2[11];
  H_X[32] = in12[3];
  H_X[33] = t42;
  H_X[34] = t21;
  H_X[35] = -in9[20] * in11[2] * m * stance_fraction * t26;
}

//
// File trailer for RPCHeuristics.cpp
//
// [EOF]
//
