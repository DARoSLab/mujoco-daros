//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: RPCConstraintJacobianFinalSP.cpp
//
// MATLAB Coder version            : 3.2
// C/C++ source code generated on  : 05-Mar-2020 07:55:47
//

// Include Files
#include "RPCBounds.h"
#include "RPCConstraintJacobian.h"
#include "RPCConstraintJacobianFinal.h"
#include "RPCConstraintJacobianFinalSP.h"
#include "RPCConstraintJacobianSP.h"
#include "RPCConstraints.h"
#include "RPCConstraintsFinal.h"
#include "RPCCost.h"
#include "RPCCostGradient.h"
#include "RPCHeuristics.h"
#include "RPCInitialize.h"
#include "RPCLagrangianHessian.h"
#include "RPCLagrangianHessianFinal.h"
#include "RPCLagrangianHessianFinalSP.h"
#include "RPCLagrangianHessianSP.h"

// Function Definitions

//
// RPCCONSTRAINTJACOBIANFINALSP
//     [ROW_INDEX_FINAL_CJ,COL_INDEX_FINAL_CJ] = RPCCONSTRAINTJACOBIANFINALSP(ITER,NUM_X,NUM_C)
// Arguments    : int iter
//                int NUM_X
//                int NUM_C
//                int row_index_final_CJ[40]
//                int col_index_final_CJ[40]
// Return Type  : void
//
void RPCConstraintJacobianFinalSP(int iter, int NUM_X, int NUM_C,
  int row_index_final_CJ[40], int col_index_final_CJ[40])
{
  int t2;

  //     This function was generated by the Symbolic Math Toolbox version 7.1.
  //     05-Mar-2020 07:54:12
  t2 = NUM_C * iter;
  row_index_final_CJ[0] = t2 + 12;
  row_index_final_CJ[1] = t2 + 13;
  row_index_final_CJ[2] = t2 + 14;
  row_index_final_CJ[3] = t2 + 15;
  row_index_final_CJ[4] = t2 + 12;
  row_index_final_CJ[5] = t2 + 28;
  row_index_final_CJ[6] = t2 + 29;
  row_index_final_CJ[7] = t2 + 30;
  row_index_final_CJ[8] = t2 + 31;
  row_index_final_CJ[9] = t2 + 28;
  row_index_final_CJ[10] = t2 + 29;
  row_index_final_CJ[11] = t2 + 30;
  row_index_final_CJ[12] = t2 + 31;
  row_index_final_CJ[13] = t2 + 13;
  row_index_final_CJ[14] = t2 + 32;
  row_index_final_CJ[15] = t2 + 33;
  row_index_final_CJ[16] = t2 + 34;
  row_index_final_CJ[17] = t2 + 35;
  row_index_final_CJ[18] = t2 + 32;
  row_index_final_CJ[19] = t2 + 33;
  row_index_final_CJ[20] = t2 + 34;
  row_index_final_CJ[21] = t2 + 35;
  row_index_final_CJ[22] = t2 + 14;
  row_index_final_CJ[23] = t2 + 36;
  row_index_final_CJ[24] = t2 + 37;
  row_index_final_CJ[25] = t2 + 38;
  row_index_final_CJ[26] = t2 + 39;
  row_index_final_CJ[27] = t2 + 36;
  row_index_final_CJ[28] = t2 + 37;
  row_index_final_CJ[29] = t2 + 38;
  row_index_final_CJ[30] = t2 + 39;
  row_index_final_CJ[31] = t2 + 15;
  row_index_final_CJ[32] = t2 + 40;
  row_index_final_CJ[33] = t2 + 41;
  row_index_final_CJ[34] = t2 + 42;
  row_index_final_CJ[35] = t2 + 43;
  row_index_final_CJ[36] = t2 + 40;
  row_index_final_CJ[37] = t2 + 41;
  row_index_final_CJ[38] = t2 + 42;
  row_index_final_CJ[39] = t2 + 43;
  t2 = NUM_X * iter;
  col_index_final_CJ[0] = t2 + 2;
  col_index_final_CJ[1] = t2 + 2;
  col_index_final_CJ[2] = t2 + 2;
  col_index_final_CJ[3] = t2 + 2;
  col_index_final_CJ[4] = t2 + 14;
  col_index_final_CJ[5] = t2 + 15;
  col_index_final_CJ[6] = t2 + 15;
  col_index_final_CJ[7] = t2 + 16;
  col_index_final_CJ[8] = t2 + 16;
  col_index_final_CJ[9] = t2 + 17;
  col_index_final_CJ[10] = t2 + 17;
  col_index_final_CJ[11] = t2 + 17;
  col_index_final_CJ[12] = t2 + 17;
  col_index_final_CJ[13] = t2 + 20;
  col_index_final_CJ[14] = t2 + 21;
  col_index_final_CJ[15] = t2 + 21;
  col_index_final_CJ[16] = t2 + 22;
  col_index_final_CJ[17] = t2 + 22;
  col_index_final_CJ[18] = t2 + 23;
  col_index_final_CJ[19] = t2 + 23;
  col_index_final_CJ[20] = t2 + 23;
  col_index_final_CJ[21] = t2 + 23;
  col_index_final_CJ[22] = t2 + 26;
  col_index_final_CJ[23] = t2 + 27;
  col_index_final_CJ[24] = t2 + 27;
  col_index_final_CJ[25] = t2 + 28;
  col_index_final_CJ[26] = t2 + 28;
  col_index_final_CJ[27] = t2 + 29;
  col_index_final_CJ[28] = t2 + 29;
  col_index_final_CJ[29] = t2 + 29;
  col_index_final_CJ[30] = t2 + 29;
  col_index_final_CJ[31] = t2 + 32;
  col_index_final_CJ[32] = t2 + 33;
  col_index_final_CJ[33] = t2 + 33;
  col_index_final_CJ[34] = t2 + 34;
  col_index_final_CJ[35] = t2 + 34;
  col_index_final_CJ[36] = t2 + 35;
  col_index_final_CJ[37] = t2 + 35;
  col_index_final_CJ[38] = t2 + 35;
  col_index_final_CJ[39] = t2 + 35;
}

//
// File trailer for RPCConstraintJacobianFinalSP.cpp
//
// [EOF]
//
