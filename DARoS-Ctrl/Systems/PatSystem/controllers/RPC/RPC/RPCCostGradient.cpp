//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: RPCCostGradient.cpp
//
// MATLAB Coder version            : 3.2
// C/C++ source code generated on  : 05-Mar-2020 07:55:47
//

// Include Files
#include "RPCBounds.h"
#include "RPCConstraintJacobian.h"
#include "RPCConstraintJacobianFinal.h"
#include "RPCConstraintJacobianFinalSP.h"
#include "RPCConstraintJacobianSP.h"
#include "RPCConstraints.h"
#include "RPCConstraintsFinal.h"
#include "RPCCost.h"
#include "RPCCostGradient.h"
#include "RPCHeuristics.h"
#include "RPCInitialize.h"
#include "RPCLagrangianHessian.h"
#include "RPCLagrangianHessianFinal.h"
#include "RPCLagrangianHessianFinalSP.h"
#include "RPCLagrangianHessianSP.h"

// Function Definitions

//
// RPCCOSTGRADIENT
//     COST_GRADIENT = RPCCOSTGRADIENT(IN1,IN2,IN3,IN4,IN5,IN6)
// Arguments    : const double in1[12]
//                const double in2[24]
//                const double in3[12]
//                const double in4[24]
//                const double in5[12]
//                const double in6[24]
//                double cost_gradient[36]
// Return Type  : void
//
void RPCCostGradient(const double in1[12], const double in2[24], const double
                     in3[12], const double in4[24], const double in5[12], const
                     double in6[24], double cost_gradient[36])
{
  //     This function was generated by the Symbolic Math Toolbox version 7.1.
  //     05-Mar-2020 07:54:00
  cost_gradient[0] = in5[0] * (in1[0] * 2.0 - in3[0] * 2.0);
  cost_gradient[1] = in5[1] * (in1[1] * 2.0 - in3[1] * 2.0);
  cost_gradient[2] = in5[2] * (in1[2] * 2.0 - in3[2] * 2.0);
  cost_gradient[3] = in5[3] * (in1[3] * 2.0 - in3[3] * 2.0);
  cost_gradient[4] = in5[4] * (in1[4] * 2.0 - in3[4] * 2.0);
  cost_gradient[5] = in5[5] * (in1[5] * 2.0 - in3[5] * 2.0);
  cost_gradient[6] = in5[6] * (in1[6] * 2.0 - in3[6] * 2.0);
  cost_gradient[7] = in5[7] * (in1[7] * 2.0 - in3[7] * 2.0);
  cost_gradient[8] = in5[8] * (in1[8] * 2.0 - in3[8] * 2.0);
  cost_gradient[9] = in5[9] * (in1[9] * 2.0 - in3[9] * 2.0);
  cost_gradient[10] = in5[10] * (in1[10] * 2.0 - in3[10] * 2.0);
  cost_gradient[11] = in5[11] * (in1[11] * 2.0 - in3[11] * 2.0);
  cost_gradient[12] = in6[0] * (in2[0] * 2.0 - in4[0] * 2.0);
  cost_gradient[13] = in6[1] * (in2[1] * 2.0 - in4[1] * 2.0);
  cost_gradient[14] = in6[2] * (in2[2] * 2.0 - in4[2] * 2.0);
  cost_gradient[15] = in6[3] * (in2[3] * 2.0 - in4[3] * 2.0);
  cost_gradient[16] = in6[4] * (in2[4] * 2.0 - in4[4] * 2.0);
  cost_gradient[17] = in6[5] * (in2[5] * 2.0 - in4[5] * 2.0);
  cost_gradient[18] = in6[6] * (in2[6] * 2.0 - in4[6] * 2.0);
  cost_gradient[19] = in6[7] * (in2[7] * 2.0 - in4[7] * 2.0);
  cost_gradient[20] = in6[8] * (in2[8] * 2.0 - in4[8] * 2.0);
  cost_gradient[21] = in6[9] * (in2[9] * 2.0 - in4[9] * 2.0);
  cost_gradient[22] = in6[10] * (in2[10] * 2.0 - in4[10] * 2.0);
  cost_gradient[23] = in6[11] * (in2[11] * 2.0 - in4[11] * 2.0);
  cost_gradient[24] = in6[12] * (in2[12] * 2.0 - in4[12] * 2.0);
  cost_gradient[25] = in6[13] * (in2[13] * 2.0 - in4[13] * 2.0);
  cost_gradient[26] = in6[14] * (in2[14] * 2.0 - in4[14] * 2.0);
  cost_gradient[27] = in6[15] * (in2[15] * 2.0 - in4[15] * 2.0);
  cost_gradient[28] = in6[16] * (in2[16] * 2.0 - in4[16] * 2.0);
  cost_gradient[29] = in6[17] * (in2[17] * 2.0 - in4[17] * 2.0);
  cost_gradient[30] = in6[18] * (in2[18] * 2.0 - in4[18] * 2.0);
  cost_gradient[31] = in6[19] * (in2[19] * 2.0 - in4[19] * 2.0);
  cost_gradient[32] = in6[20] * (in2[20] * 2.0 - in4[20] * 2.0);
  cost_gradient[33] = in6[21] * (in2[21] * 2.0 - in4[21] * 2.0);
  cost_gradient[34] = in6[22] * (in2[22] * 2.0 - in4[22] * 2.0);
  cost_gradient[35] = in6[23] * (in2[23] * 2.0 - in4[23] * 2.0);
}

//
// File trailer for RPCCostGradient.cpp
//
// [EOF]
//
