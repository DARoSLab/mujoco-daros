//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: RPCConstraintJacobianFinal.cpp
//
// MATLAB Coder version            : 3.2
// C/C++ source code generated on  : 05-Mar-2020 07:55:47
//

// Include Files
#include "RPCBounds.h"
#include "RPCConstraintJacobian.h"
#include "RPCConstraintJacobianFinal.h"
#include "RPCConstraintJacobianFinalSP.h"
#include "RPCConstraintJacobianSP.h"
#include "RPCConstraints.h"
#include "RPCConstraintsFinal.h"
#include "RPCCost.h"
#include "RPCCostGradient.h"
#include "RPCHeuristics.h"
#include "RPCInitialize.h"
#include "RPCLagrangianHessian.h"
#include "RPCLagrangianHessianFinal.h"
#include "RPCLagrangianHessianFinalSP.h"
#include "RPCLagrangianHessianSP.h"

// Function Definitions

//
// RPCCONSTRAINTJACOBIANFINAL
//     CONSTRAINT_JACOBIAN_FINAL_NZ = RPCCONSTRAINTJACOBIANFINAL(IN1,IN2,IN3)
// Arguments    : const double in1[4]
//                const double in2[4]
//                const double in3[4]
//                double constraint_jacobian_final_nz[40]
// Return Type  : void
//
void RPCConstraintJacobianFinal(const double in1[4], const double in2[4], const
  double in3[4], double constraint_jacobian_final_nz[40])
{
  //     This function was generated by the Symbolic Math Toolbox version 7.1.
  //     05-Mar-2020 07:54:12
  constraint_jacobian_final_nz[0] = -in1[0] * in2[0];
  constraint_jacobian_final_nz[1] = -in1[1] * in2[1];
  constraint_jacobian_final_nz[2] = -in1[2] * in2[2];
  constraint_jacobian_final_nz[3] = -in1[3] * in2[3];
  constraint_jacobian_final_nz[4] = -in1[0] * in2[0];
  constraint_jacobian_final_nz[5] = in1[0];
  constraint_jacobian_final_nz[6] = -in1[0];
  constraint_jacobian_final_nz[7] = in1[0];
  constraint_jacobian_final_nz[8] = -in1[0];
  constraint_jacobian_final_nz[9] = -in1[0] * in3[0];
  constraint_jacobian_final_nz[10] = -in1[0] * in3[0];
  constraint_jacobian_final_nz[11] = -in1[0] * in3[0];
  constraint_jacobian_final_nz[12] = -in1[0] * in3[0];
  constraint_jacobian_final_nz[13] = -in1[1] * in2[1];
  constraint_jacobian_final_nz[14] = in1[1];
  constraint_jacobian_final_nz[15] = -in1[1];
  constraint_jacobian_final_nz[16] = in1[1];
  constraint_jacobian_final_nz[17] = -in1[1];
  constraint_jacobian_final_nz[18] = -in1[1] * in3[1];
  constraint_jacobian_final_nz[19] = -in1[1] * in3[1];
  constraint_jacobian_final_nz[20] = -in1[1] * in3[1];
  constraint_jacobian_final_nz[21] = -in1[1] * in3[1];
  constraint_jacobian_final_nz[22] = -in1[2] * in2[2];
  constraint_jacobian_final_nz[23] = in1[2];
  constraint_jacobian_final_nz[24] = -in1[2];
  constraint_jacobian_final_nz[25] = in1[2];
  constraint_jacobian_final_nz[26] = -in1[2];
  constraint_jacobian_final_nz[27] = -in1[2] * in3[2];
  constraint_jacobian_final_nz[28] = -in1[2] * in3[2];
  constraint_jacobian_final_nz[29] = -in1[2] * in3[2];
  constraint_jacobian_final_nz[30] = -in1[2] * in3[2];
  constraint_jacobian_final_nz[31] = -in1[3] * in2[3];
  constraint_jacobian_final_nz[32] = in1[3];
  constraint_jacobian_final_nz[33] = -in1[3];
  constraint_jacobian_final_nz[34] = in1[3];
  constraint_jacobian_final_nz[35] = -in1[3];
  constraint_jacobian_final_nz[36] = -in1[3] * in3[3];
  constraint_jacobian_final_nz[37] = -in1[3] * in3[3];
  constraint_jacobian_final_nz[38] = -in1[3] * in3[3];
  constraint_jacobian_final_nz[39] = -in1[3] * in3[3];
}

//
// File trailer for RPCConstraintJacobianFinal.cpp
//
// [EOF]
//
