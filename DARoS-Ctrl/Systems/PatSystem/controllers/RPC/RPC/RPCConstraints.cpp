//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: RPCConstraints.cpp
//
// MATLAB Coder version            : 3.2
// C/C++ source code generated on  : 05-Mar-2020 07:55:47
//

// Include Files
#include "RPCBounds.h"
#include "RPCConstraintJacobian.h"
#include "RPCConstraintJacobianFinal.h"
#include "RPCConstraintJacobianFinalSP.h"
#include "RPCConstraintJacobianSP.h"
#include "RPCConstraints.h"
#include "RPCConstraintsFinal.h"
#include "RPCCost.h"
#include "RPCCostGradient.h"
#include "RPCHeuristics.h"
#include "RPCInitialize.h"
#include "RPCLagrangianHessian.h"
#include "RPCLagrangianHessianFinal.h"
#include "RPCLagrangianHessianFinalSP.h"
#include "RPCLagrangianHessianSP.h"

// Function Definitions

//
// RPCCONSTRAINTS
//     CONSTRAINTS = RPCCONSTRAINTS(IN1,IN2,IN3,IN4,IN5,IN6,IN7,DT,M,IN10,IN11,IN12,IN13)
// Arguments    : const double in1[12]
//                const double in2[24]
//                const double in3[12]
//                const double in4[24]
//                const double in5[4]
//                const double in6[4]
//                const double in7[4]
//                double dt
//                double m
//                const double in10[3]
//                const double in11[3]
//                const double in12[4]
//                const double in13[4]
//                double constraints[44]
// Return Type  : void
//
void RPCConstraints(const double in1[12], const double in2[24], const double
                    in3[12], const double in4[24], const double in5[4], const
                    double in6[4], const double in7[4], double dt, double m,
                    const double in10[3], const double in11[3], const double
                    in12[4], const double in13[4], double constraints[44])
{
  double t2;
  double t3;
  double t4;
  double t5;
  double t6;
  double t7;
  double t8;
  double t9;
  double t10;
  double t11;
  double t12;
  double t17;
  double t22;
  double t23;
  double t45;
  double t50;
  double t55;
  double t56;
  double t64;
  double t65;
  double t74;

  //     This function was generated by the Symbolic Math Toolbox version 7.1.
  //     05-Mar-2020 07:54:01
  t2 = dt * dt;
  t3 = 1.0 / m;
  t4 = in5[0] * in5[0];
  t5 = in5[1] * in5[1];
  t6 = in5[2] * in5[2];
  t7 = in5[3] * in5[3];
  t8 = std::cos(in1[3]);
  t9 = std::sin(in1[5]);
  t10 = std::cos(in1[5]);
  t11 = std::sin(in1[3]);
  t12 = std::sin(in1[4]);
  t17 = ((((((in2[3] * in2[1] * t4 + in2[9] * in2[7] * t5) + in2[15] * in2[13] *
             t6) + in2[21] * in2[19] * t7) - in2[4] * in2[0] * t4) - in2[10] *
          in2[6] * t5) - in2[16] * in2[12] * t6) - in2[22] * in2[18] * t7;
  t22 = ((((((in2[3] * in2[2] * t4 + in2[9] * in2[8] * t5) + in2[15] * in2[14] *
             t6) + in2[21] * in2[20] * t7) - in2[5] * in2[0] * t4) - in2[11] *
          in2[6] * t5) - in2[17] * in2[12] * t6) - in2[23] * in2[18] * t7;
  t23 = std::cos(in1[4]);
  t4 = ((((((in2[4] * in2[2] * t4 + in2[10] * in2[8] * t5) + in2[16] * in2[14] *
            t6) + in2[22] * in2[20] * t7) - in2[5] * in2[1] * t4) - in2[11] *
         in2[7] * t5) - in2[17] * in2[13] * t6) - in2[23] * in2[19] * t7;
  t45 = ((in5[0] * in2[3] + in5[1] * in2[9]) + in5[2] * in2[15]) + in5[3] * in2
    [21];
  t50 = ((in5[0] * in2[4] + in5[1] * in2[10]) + in5[2] * in2[16]) + in5[3] *
    in2[22];
  t55 = ((in5[0] * in2[5] + in5[1] * in2[11]) + in5[2] * in2[17]) + in5[3] *
    in2[23];
  t56 = 1.0 / in10[0];
  t64 = (t17 * (t9 * t11 - t8 * t10 * t12) + t10 * t23 * t4) - t22 * (t8 * t9 +
    t10 * t11 * t12);
  t65 = 1.0 / in10[1];
  t10 = (t22 * (t8 * t10 - t9 * t11 * t12) + t9 * t23 * t4) - t17 * (t10 * t11 +
    t8 * t9 * t12);
  t74 = 1.0 / in10[2];
  t4 = (t12 * t4 + t8 * t17 * t23) + t11 * t22 * t23;
  t5 = in2[5] * in13[0];
  t6 = in2[11] * in13[1];
  t7 = in2[17] * in13[2];
  t9 = in2[23] * in13[3];
  constraints[0] = (((in3[0] - in1[0]) - in11[0] * t2 * 0.5) - dt * in1[6]) - t2
    * t3 * t45 * 0.5;
  constraints[1] = (((in3[1] - in1[1]) - in11[1] * t2 * 0.5) - dt * in1[7]) - t2
    * t3 * t50 * 0.5;
  constraints[2] = (((in3[2] - in1[2]) - in11[2] * t2 * 0.5) - dt * in1[8]) - t2
    * t3 * t55 * 0.5;
  constraints[3] = ((in3[3] - in1[3]) - dt * in1[9]) + t2 * t56 * t64 * 0.5;
  constraints[4] = ((in3[4] - in1[4]) - dt * in1[10]) - t2 * t65 * t10 * 0.5;
  constraints[5] = ((in3[5] - in1[5]) - dt * in1[11]) + t2 * t74 * t4 * 0.5;
  constraints[6] = ((in3[6] - in1[6]) - dt * in11[0]) - dt * t3 * t45;
  constraints[7] = ((in3[7] - in1[7]) - dt * in11[1]) - dt * t3 * t50;
  constraints[8] = ((in3[8] - in1[8]) - dt * in11[2]) - dt * t3 * t55;
  constraints[9] = (in3[9] - in1[9]) + dt * t56 * t64;
  constraints[10] = (in3[10] - in1[10]) - dt * t65 * t10;
  constraints[11] = (in3[11] - in1[11]) + dt * t74 * t4;
  constraints[12] = -in5[0] * in7[0] * ((in2[2] + in1[2]) - in12[0]);
  constraints[13] = -in5[1] * in7[1] * ((in2[8] + in1[2]) - in12[1]);
  constraints[14] = -in5[2] * in7[2] * ((in2[14] + in1[2]) - in12[2]);
  constraints[15] = -in5[3] * in7[3] * ((in2[20] + in1[2]) - in12[3]);
  constraints[16] = in6[0] * in5[0] * (((in4[0] - in2[0]) + in3[0]) - in1[0]);
  constraints[17] = in6[0] * in5[0] * (((in4[1] - in2[1]) + in3[1]) - in1[1]);
  constraints[18] = in6[0] * in5[0] * (((in4[2] - in2[2]) + in3[2]) - in1[2]);
  constraints[19] = in6[1] * in5[1] * (((in4[6] - in2[6]) + in3[0]) - in1[0]);
  constraints[20] = in6[1] * in5[1] * (((in4[7] - in2[7]) + in3[1]) - in1[1]);
  constraints[21] = in6[1] * in5[1] * (((in4[8] - in2[8]) + in3[2]) - in1[2]);
  constraints[22] = in6[2] * in5[2] * (((in4[12] - in2[12]) + in3[0]) - in1[0]);
  constraints[23] = in6[2] * in5[2] * (((in4[13] - in2[13]) + in3[1]) - in1[1]);
  constraints[24] = in6[2] * in5[2] * (((in4[14] - in2[14]) + in3[2]) - in1[2]);
  constraints[25] = in6[3] * in5[3] * (((in4[18] - in2[18]) + in3[0]) - in1[0]);
  constraints[26] = in6[3] * in5[3] * (((in4[19] - in2[19]) + in3[1]) - in1[1]);
  constraints[27] = in6[3] * in5[3] * (((in4[20] - in2[20]) + in3[2]) - in1[2]);
  constraints[28] = in5[0] * (in2[3] - in2[5] * in13[0]);
  constraints[29] = -in5[0] * (in2[3] + t5);
  constraints[30] = in5[0] * (in2[4] - t5);
  constraints[31] = -in5[0] * (in2[4] + t5);
  constraints[32] = in5[1] * (in2[9] - in2[11] * in13[1]);
  constraints[33] = -in5[1] * (in2[9] + t6);
  constraints[34] = in5[1] * (in2[10] - t6);
  constraints[35] = -in5[1] * (in2[10] + t6);
  constraints[36] = in5[2] * (in2[15] - in2[17] * in13[2]);
  constraints[37] = -in5[2] * (in2[15] + t7);
  constraints[38] = in5[2] * (in2[16] - t7);
  constraints[39] = -in5[2] * (in2[16] + t7);
  constraints[40] = in5[3] * (in2[21] - in2[23] * in13[3]);
  constraints[41] = -in5[3] * (in2[21] + t9);
  constraints[42] = in5[3] * (in2[22] - t9);
  constraints[43] = -in5[3] * (in2[22] + t9);
}

//
// File trailer for RPCConstraints.cpp
//
// [EOF]
//
