//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: RPCLagrangianHessianFinal.cpp
//
// MATLAB Coder version            : 3.2
// C/C++ source code generated on  : 05-Mar-2020 07:55:47
//

// Include Files
#include "RPCBounds.h"
#include "RPCConstraintJacobian.h"
#include "RPCConstraintJacobianFinal.h"
#include "RPCConstraintJacobianFinalSP.h"
#include "RPCConstraintJacobianSP.h"
#include "RPCConstraints.h"
#include "RPCConstraintsFinal.h"
#include "RPCCost.h"
#include "RPCCostGradient.h"
#include "RPCHeuristics.h"
#include "RPCInitialize.h"
#include "RPCLagrangianHessian.h"
#include "RPCLagrangianHessianFinal.h"
#include "RPCLagrangianHessianFinalSP.h"
#include "RPCLagrangianHessianSP.h"

// Function Definitions

//
// RPCLAGRANGIANHESSIANFINAL
//     LAGRANGIAN_HESSIAN_FINAL_NZ = RPCLAGRANGIANHESSIANFINAL(IN1,IN2,OBJ_FACTOR)
// Arguments    : const double in1[12]
//                const double in2[24]
//                double obj_factor
//                double lagrangian_hessian_final_nz[36]
// Return Type  : void
//
void RPCLagrangianHessianFinal(const double in1[12], const double in2[24],
  double obj_factor, double lagrangian_hessian_final_nz[36])
{
  //     This function was generated by the Symbolic Math Toolbox version 7.1.
  //     05-Mar-2020 07:54:50
  lagrangian_hessian_final_nz[0] = obj_factor * in1[0] * 2.0;
  lagrangian_hessian_final_nz[1] = obj_factor * in1[1] * 2.0;
  lagrangian_hessian_final_nz[2] = obj_factor * in1[2] * 2.0;
  lagrangian_hessian_final_nz[3] = obj_factor * in1[3] * 2.0;
  lagrangian_hessian_final_nz[4] = obj_factor * in1[4] * 2.0;
  lagrangian_hessian_final_nz[5] = obj_factor * in1[5] * 2.0;
  lagrangian_hessian_final_nz[6] = obj_factor * in1[6] * 2.0;
  lagrangian_hessian_final_nz[7] = obj_factor * in1[7] * 2.0;
  lagrangian_hessian_final_nz[8] = obj_factor * in1[8] * 2.0;
  lagrangian_hessian_final_nz[9] = obj_factor * in1[9] * 2.0;
  lagrangian_hessian_final_nz[10] = obj_factor * in1[10] * 2.0;
  lagrangian_hessian_final_nz[11] = obj_factor * in1[11] * 2.0;
  lagrangian_hessian_final_nz[12] = obj_factor * in2[0] * 2.0;
  lagrangian_hessian_final_nz[13] = obj_factor * in2[1] * 2.0;
  lagrangian_hessian_final_nz[14] = obj_factor * in2[2] * 2.0;
  lagrangian_hessian_final_nz[15] = obj_factor * in2[3] * 2.0;
  lagrangian_hessian_final_nz[16] = obj_factor * in2[4] * 2.0;
  lagrangian_hessian_final_nz[17] = obj_factor * in2[5] * 2.0;
  lagrangian_hessian_final_nz[18] = obj_factor * in2[6] * 2.0;
  lagrangian_hessian_final_nz[19] = obj_factor * in2[7] * 2.0;
  lagrangian_hessian_final_nz[20] = obj_factor * in2[8] * 2.0;
  lagrangian_hessian_final_nz[21] = obj_factor * in2[9] * 2.0;
  lagrangian_hessian_final_nz[22] = obj_factor * in2[10] * 2.0;
  lagrangian_hessian_final_nz[23] = obj_factor * in2[11] * 2.0;
  lagrangian_hessian_final_nz[24] = obj_factor * in2[12] * 2.0;
  lagrangian_hessian_final_nz[25] = obj_factor * in2[13] * 2.0;
  lagrangian_hessian_final_nz[26] = obj_factor * in2[14] * 2.0;
  lagrangian_hessian_final_nz[27] = obj_factor * in2[15] * 2.0;
  lagrangian_hessian_final_nz[28] = obj_factor * in2[16] * 2.0;
  lagrangian_hessian_final_nz[29] = obj_factor * in2[17] * 2.0;
  lagrangian_hessian_final_nz[30] = obj_factor * in2[18] * 2.0;
  lagrangian_hessian_final_nz[31] = obj_factor * in2[19] * 2.0;
  lagrangian_hessian_final_nz[32] = obj_factor * in2[20] * 2.0;
  lagrangian_hessian_final_nz[33] = obj_factor * in2[21] * 2.0;
  lagrangian_hessian_final_nz[34] = obj_factor * in2[22] * 2.0;
  lagrangian_hessian_final_nz[35] = obj_factor * in2[23] * 2.0;
}

//
// File trailer for RPCLagrangianHessianFinal.cpp
//
// [EOF]
//
